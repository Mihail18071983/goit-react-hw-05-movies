{"version":3,"file":"static/js/247.2179551a.chunk.js","mappings":"8OA8DA,UAtDkB,WACd,OAAkCA,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACF,GAA0BF,EAAAA,EAAAA,WAAS,GAAnC,eAAOG,EAAP,KAAcC,EAAd,KACSC,GAAWC,EAAAA,EAAAA,MAAXD,QAmBP,OAhBAE,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAS,mCAAG,kHAEWC,EAAAA,EAAAA,IAAaJ,GAFxB,gBAEHK,EAFG,EAEHA,KACPR,EAAaQ,GAHH,gDAMNC,EANM,KAMNA,SACJP,GAAS,GACTQ,QAAQC,IAAIF,EAASG,KAAKC,SARhB,yDAAH,qDAYfP,EAAUH,EACb,GAAE,CAACA,KAGA,2BACKF,IAAS,SAAC,UAAD,KACV,iCACCF,EAAUe,QACP,wBACKf,EAAUgB,MAAM,EAAG,IAAIC,KAAI,SAAAC,GAAK,OAC7B,2BACI,gBACIC,IACAD,EAAME,aAAN,0CACyCF,EAAME,cAD/C,kCAIAC,IAAG,UAAKH,EAAMI,SAClB,4BACI,uBAAIJ,EAAMI,QACV,wCAAc,mBACV,0BAAOJ,EAAMK,oBAXhBL,EAAMM,QADc,OAmBjC,wCAKnB,C,2CCxDD,UAJqB,WACjB,OAAO,0CACV,C,yLCAKC,E,QAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BAETC,OAAQ,CACNC,QAAS,sCAIAC,EAAa,mCAAG,WAAOC,GAAP,+EACT,QACC,OAFQ,SAGJN,EAASO,IAAT,oBAFL,QAEK,YADJ,OACI,iBACwBD,IAJpB,uBAGnBlB,EAHmB,EAGnBA,KAHmB,kBAMpBA,GANoB,2CAAH,sDASboB,EAAW,mCAAG,WAAOF,EAAOG,GAAd,yFACFT,EAASO,IAAT,6BAAmCD,EAAnC,kBAAiDG,IAD/C,uBACjBrB,EADiB,EACjBA,KADiB,kBAElBA,GAFkB,2CAAH,wDAWXsB,EAAc,mCAAG,WAAOC,GAAP,yFACLX,EAASO,IAAT,iBAAuBI,IADlB,uBACpBvB,EADoB,EACpBA,KADoB,kBAErBA,GAFqB,2CAAH,sDAKdL,EAAY,mCAAG,WAAOJ,GAAP,yFACHqB,EAASO,IAAT,iBAAuB5B,EAAvB,aADG,uBAClBS,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAKZwB,EAAY,mCAAG,WAAOD,GAAP,yFACHX,EAASO,IAAT,iBAAuBI,EAAvB,aADG,uBAClBvB,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,qD","sources":["components/Cast/Cast.jsx","pages/NotFound/NotFoundPage.jsx","shared/services/fetch-api.js"],"sourcesContent":["\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport NotFoundPage from 'pages/NotFound/NotFoundPage';\n\nimport { fetchCredits } from 'shared/services/fetch-api';\n\nconst MovieCast = () => {\n    const [movieCast, setMovieCast] = useState([]);\n  const [error, setError] = useState(false);\n    const {movieId} = useParams();\n\n    \n    useEffect(() => {\n        const fetchCast = async () => {\n            try {\n                const {cast} = await fetchCredits(movieId);\n                setMovieCast(cast)\n            }\n\n            catch ({response}) {\n                setError(true);\n                console.log(response.data.message);\n                \n            }\n        }\n        fetchCast(movieId)\n    }, [movieId])\n    \n    return (\n        <div>\n            {error && <NotFoundPage />}\n            <h2>Cast</h2>\n            {movieCast.length ? (\n                <ul>\n                    {movieCast.slice(0, 12).map(actor => (\n                        <li key={actor.cast_id}>\n                            <img\n                                src={\n                                actor.profile_path\n                                    ? `https://image.tmdb.org/t/p/w200/${actor.profile_path}`\n                                    : `https://via.placeholder.com/200`\n                            }\n                                alt={`${actor.name}`} />\n                            <div>\n                                <p>{actor.name}</p>\n                                <p>Character: <br/>\n                                    <span>{actor.character}</span></p>\n\n                            </div>\n                        </li>\n                    ))}\n                </ul>\n                ) : (\n                    <p>No results</p>\n                )}\n\n        </div>\n    )\n}\n\nexport default MovieCast","const NotFoundPage = ()=> {\n    return <h1>Not found page</h1>\n}\n\nexport default NotFoundPage;","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n\n  params: {\n    api_key: 'ac91775ba29254b7e75060011bf34a90',\n  },\n});\n\nexport const fetchTrending = async (page) => {\n  const mediaType = 'movie';\n  const timeWindow = 'week';\n  const { data } = await instance.get(\n    `/trending/${mediaType}/${timeWindow}?page=${page}`\n  );\n  return data;\n};\n\nexport const fetchMovies = async (page , query) => {\n  const { data } = await instance.get(`/search/movie?page=${page}&query=${query}`);\n  return data;\n};\n\nexport const fetchGenres = async () => {\n  const { data } = await instance.get(`/genre/movie/list`);\n  console.log('genres', data.genres);\n  return data.genres;\n};\n\nexport const fetchMovieById = async (movieID) => {\n  const { data } = await instance.get(`/movie/${movieID}`);\n  return data;\n};\n\nexport const fetchCredits = async (movieId) => {\n  const { data } = await instance.get(`/movie/${movieId}/credits`);\n  return data;\n};\n\nexport const fetchReviews = async (movieID) => {\n  const { data } = await instance.get(`/movie/${movieID}/reviews`);\n  return data;\n};\n"],"names":["useState","movieCast","setMovieCast","error","setError","movieId","useParams","useEffect","fetchCast","fetchCredits","cast","response","console","log","data","message","length","slice","map","actor","src","profile_path","alt","name","character","cast_id","instance","axios","baseURL","params","api_key","fetchTrending","page","get","fetchMovies","query","fetchMovieById","movieID","fetchReviews"],"sourceRoot":""}