{"version":3,"file":"static/js/961.78f565f4.chunk.js","mappings":"wPA+EA,UAxEqB,WAAO,IAAD,EACzB,GAAkCA,EAAAA,EAAAA,UAAS,MAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA0BF,EAAAA,EAAAA,WAAS,GAAnC,eAAOG,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,MAGXC,GAAO,WAFIC,EAAAA,EAAAA,MAEKC,aAAT,eAAgBF,OAAQ,KAErCG,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAiB,mCAAG,WAAMC,GAAN,mGAEDC,EAAAA,EAAAA,IAAeD,GAFd,OAEhBE,EAFgB,OAGtBd,EAAac,GAHS,gDAIbC,EAJa,KAIbA,SACTC,QAAQC,IAAIF,EAASG,KAAKC,SAC1BjB,GAAS,GANa,yDAAH,sDASvBS,EAAkBR,EACnB,GAAE,CAACA,IAIJ,OACE,6BACE,mBAAQiB,QAJG,kBAAMf,EAASE,EAAf,EAIX,qBACCN,IAAS,SAAC,UAAD,IACTF,IACC,iCACE,gBACEsB,IACEtB,EAAUuB,YAAV,0CACuCvB,EAAUuB,aAC7C,kCAENC,IAAKxB,EAAUyB,WAEjB,4BACE,2BACE,0BAAOzB,EAAU0B,SACjB,qCAAW1B,EAAU2B,aAAaC,MAAM,EAAG,GAA3C,WAEF,0BACE,uCACC5B,EAAU6B,aAEb,0BACE,sCACA,0BACG7B,EAAU8B,QACT9B,EAAU8B,OAAOC,KAAI,SAAAC,GAAK,OAAIA,EAAMC,IAAV,IAAgBC,KAAK,kBAO3D,4BACE,SAAC,KAAD,CAAMC,GAAG,OAAOzB,MAAO,CAAEF,KAAAA,GAAzB,mBAGA,SAAC,KAAD,CAAM2B,GAAG,UAAUzB,MAAO,CAAEF,KAAAA,GAA5B,yBAKF,SAAC,KAAD,MAGL,C,2CCzED,UAJqB,WACjB,OAAO,0CACV,C,yLCAK4B,E,QAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BAETC,OAAQ,CACNC,QAAS,sCAIAC,EAAa,mCAAG,WAAOC,GAAP,+EACT,QACC,OAFQ,SAGJN,EAASO,IAAT,oBAFL,QAEK,YADJ,OACI,iBACwBD,IAJpB,uBAGnBvB,EAHmB,EAGnBA,KAHmB,kBAMpBA,GANoB,2CAAH,sDASbyB,EAAW,mCAAG,WAAOF,EAAOG,GAAd,yFACFT,EAASO,IAAT,6BAAmCD,EAAnC,kBAAiDG,IAD/C,uBACjB1B,EADiB,EACjBA,KADiB,kBAElBA,GAFkB,2CAAH,wDAWXL,EAAc,mCAAG,WAAOgC,GAAP,yFACLV,EAASO,IAAT,iBAAuBG,IADlB,uBACpB3B,EADoB,EACpBA,KADoB,kBAErBA,GAFqB,2CAAH,sDAKd4B,EAAY,mCAAG,WAAO3C,GAAP,yFACHgC,EAASO,IAAT,iBAAuBvC,EAAvB,aADG,uBAClBe,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAKZ6B,EAAY,mCAAG,WAAOF,GAAP,yFACHV,EAASO,IAAT,iBAAuBG,EAAvB,aADG,uBAClB3B,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,qD","sources":["pages/MovieDetails/MovieDetails.jsx","pages/NotFound/NotFoundPage.jsx","shared/services/fetch-api.js"],"sourcesContent":["import { useParams, useNavigate, useLocation } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { Link, Outlet } from 'react-router-dom';\n\nimport { fetchMovieById } from 'shared/services/fetch-api';\nimport NotFoundPage from 'pages/NotFound/NotFoundPage';\n\nconst MovieDetails = () => {\n  const [movieInfo, setMovieInfo] = useState(null);\n  const [error, setError] = useState(false);\n  const { movieId } = useParams();\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const from = location.state?.from || '/';\n\n  useEffect(() => {\n    const fetchMovieDetails = async id => {\n      try {\n        const result = await fetchMovieById(id);\n        setMovieInfo(result);\n      } catch ({ response }) {\n        console.log(response.data.message);\n        setError(true);\n      }\n    };\n    fetchMovieDetails(movieId);\n  }, [movieId]);\n\n  const goBack = () => navigate(from);\n\n  return (\n    <main>\n      <button onClick={goBack}>Go Back</button>\n      {error && <NotFoundPage />}\n      {movieInfo && (\n        <>\n          <img\n            src={\n              movieInfo.poster_path\n                ? `https://image.tmdb.org/t/p/w200/${movieInfo.poster_path}`\n                : 'https://via.placeholder.com/200'\n            }\n            alt={movieInfo.tagline}\n          />\n          <div>\n            <h1>\n              <span>{movieInfo.title}</span>\n              <span>{`(${movieInfo.release_date.slice(0, 4)})`}</span>\n            </h1>\n            <p>\n              <span>Overview</span>\n              {movieInfo.overview}\n            </p>\n            <p>\n              <span>Genre:</span>\n              <span>\n                {movieInfo.genres &&\n                  movieInfo.genres.map(genre => genre.name).join(', ')}\n              </span>\n            </p>\n          </div>\n        </>\n      )}\n\n      <div>\n        <Link to=\"cast\" state={{ from}}>\n          Cast\n        </Link>\n        <Link to=\"reviews\" state={{ from }}>\n          Reviews\n        </Link>\n      </div>\n\n      <Outlet />\n    </main>\n  );\n};\n\nexport default MovieDetails;\n","const NotFoundPage = ()=> {\n    return <h1>Not found page</h1>\n}\n\nexport default NotFoundPage;","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n\n  params: {\n    api_key: 'ac91775ba29254b7e75060011bf34a90',\n  },\n});\n\nexport const fetchTrending = async (page) => {\n  const mediaType = 'movie';\n  const timeWindow = 'week';\n  const { data } = await instance.get(\n    `/trending/${mediaType}/${timeWindow}?page=${page}`\n  );\n  return data;\n};\n\nexport const fetchMovies = async (page , query) => {\n  const { data } = await instance.get(`/search/movie?page=${page}&query=${query}`);\n  return data;\n};\n\nexport const fetchGenres = async () => {\n  const { data } = await instance.get(`/genre/movie/list`);\n  console.log('genres', data.genres);\n  return data.genres;\n};\n\nexport const fetchMovieById = async (movieID) => {\n  const { data } = await instance.get(`/movie/${movieID}`);\n  return data;\n};\n\nexport const fetchCredits = async (movieId) => {\n  const { data } = await instance.get(`/movie/${movieId}/credits`);\n  return data;\n};\n\nexport const fetchReviews = async (movieID) => {\n  const { data } = await instance.get(`/movie/${movieID}/reviews`);\n  return data;\n};\n"],"names":["useState","movieInfo","setMovieInfo","error","setError","movieId","useParams","navigate","useNavigate","from","useLocation","state","useEffect","fetchMovieDetails","id","fetchMovieById","result","response","console","log","data","message","onClick","src","poster_path","alt","tagline","title","release_date","slice","overview","genres","map","genre","name","join","to","instance","axios","baseURL","params","api_key","fetchTrending","page","get","fetchMovies","query","movieID","fetchCredits","fetchReviews"],"sourceRoot":""}